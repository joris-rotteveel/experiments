{"version":3,"sources":["assets/mountain.jpg","assets/street.jpg","assets/laptop.jpg","utils.js","m4.js","index.js"],"names":["module","exports","__webpack_require__","p","topWindow","undefined","error","msg","console","log","loadShader","gl","shaderSource","shaderType","opt_errorCallback","errFn","shader","createShader","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","createProgram","shaders","opt_attribs","opt_locations","program","forEach","attachShader","attrib","ndx","bindAttribLocation","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","createShaderFromScript","scriptId","opt_shaderType","shaderScript","document","getElementById","text","type","VERTEX_SHADER","FRAGMENT_SHADER","defaultShaderType","MatType","Float32Array","subtractVectors","a","b","dst","normalize","v","length","Math","sqrt","cross","distanceSq","dx","dy","dz","inverse","m","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","tmp_0","tmp_1","tmp_2","tmp_3","tmp_4","tmp_5","tmp_6","tmp_7","tmp_8","tmp_9","tmp_10","tmp_11","tmp_12","tmp_13","tmp_14","tmp_15","tmp_16","tmp_17","tmp_18","tmp_19","tmp_20","tmp_21","tmp_22","tmp_23","t0","t1","t2","t3","d","m4","copy","src","lookAt","cameraPosition","target","up","zAxis","xAxis","yAxis","addVectors","scaleVector","s","distance","compose","translation","quaternion","scale","x","y","z","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","sx","sy","sz","decompose","mat","slice","determinate","matrix","invSX","invSY","invSZ","trace","quatFromRotationMatrix","dot","identity","transpose","lengthSq","orthographic","left","right","bottom","top","near","far","frustum","perspective","fieldOfViewInRadians","aspect","f","tan","PI","rangeInv","tx","ty","tz","translate","xRotation","angleInRadians","c","cos","sin","yRotation","zRotation","xRotate","yRotate","zRotate","axisRotation","axis","n","oneMinusCosine","axisRotate","r00","r01","r02","r10","r11","r12","r20","r21","r22","scaling","multiply","b00","b01","b02","b03","b10","b11","b12","b13","b20","b21","b22","b23","b30","b31","b32","b33","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","transformVector","i","j","transformPoint","v0","v1","v2","transformDirection","transformNormal","mi","setDefaultType","Ctor","OldType","querySelector","getContext","shaderScriptIds","ii","push","createProgramFromScripts","positionLocation","getAttribLocation","texcoordLocation","matrixLocation","getUniformLocation","textureMatrixLocation","textureLocation","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","texcoordBuffer","textureInfos","url","tex","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","Uint8Array","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","textureInfo","width","height","texture","img","Image","addEventListener","loadImageAndCreateTextureInfo","mountain","drawInfos","tl","bl","tr","br","drawInfo","speed","xScale","yScale","offX","offY","rotation","deltaRotation","random","vertices","verticesInitial","draw","canvas","multiplier","clientWidth","clientHeight","resizeCanvasToDisplaySize","viewport","clear","COLOR_BUFFER_BIT","dstX","dstY","dstWidth","dstHeight","srcWidth","srcHeight","texWidth","texHeight","srcX","srcY","srcRotation","useProgram","vertexPositions","enableVertexAttribArray","vertexAttribPointer","FLOAT","uniformMatrix4fv","texMatrix","uniform1i","drawArrays","TRIANGLES","drawImage","then","requestAnimationFrame","render","time","now","min","deltaTime","Object","keys","key","index","update"],"mappings":"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","file":"static/js/main.831dcf84.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mountain.ac271de8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/street.fcf987b9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/laptop.5e6bc3b7.jpg\";","/*\n * Copyright 2012, Gregg Tavares.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Gregg Tavares. nor the names of his\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nconst topWindow = this;\n\nexport function isInIFrame(w) {\n  w = w || topWindow;\n  return w !== w.top;\n}\n\n/**\n * Wrapped logging function.\n * @param {string} msg The message to log.\n */\nexport function error(msg) {\n  if (topWindow.console) {\n    if (topWindow.console.error) {\n      topWindow.console.error(msg);\n    } else if (topWindow.console.log) {\n      topWindow.console.log(msg);\n    }\n  }\n}\n\n/**\n * Error Callback\n * @callback ErrorCallback\n * @param {string} msg error message.\n * @memberOf module:webgl-utils\n */\n\n/**\n * Loads a shader.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} shaderSource The shader source.\n * @param {number} shaderType The type of shader.\n * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors.\n * @return {WebGLShader} The created shader.\n */\nexport function loadShader(gl, shaderSource, shaderType, opt_errorCallback) {\n  const errFn = opt_errorCallback || error;\n  // Create the shader object\n  const shader = gl.createShader(shaderType);\n\n  // Load the shader source\n  gl.shaderSource(shader, shaderSource);\n\n  // Compile the shader\n  gl.compileShader(shader);\n\n  // Check the compile status\n  const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  if (!compiled) {\n    // Something went wrong during compilation; get the error\n    const lastError = gl.getShaderInfoLog(shader);\n    errFn(\"*** Error compiling shader '\" + shader + \"':\" + lastError);\n    gl.deleteShader(shader);\n    return null;\n  }\n\n  return shader;\n}\n\n/**\n * Creates a program, attaches shaders, binds attrib locations, links the\n * program and calls useProgram.\n * @param {WebGLShader[]} shaders The shaders to attach\n * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @memberOf module:webgl-utils\n */\nexport function createProgram(\n  gl,\n  shaders,\n  opt_attribs,\n  opt_locations,\n  opt_errorCallback\n) {\n  const errFn = opt_errorCallback || error;\n  const program = gl.createProgram();\n  shaders.forEach(function (shader) {\n    gl.attachShader(program, shader);\n  });\n  if (opt_attribs) {\n    opt_attribs.forEach(function (attrib, ndx) {\n      gl.bindAttribLocation(\n        program,\n        opt_locations ? opt_locations[ndx] : ndx,\n        attrib\n      );\n    });\n  }\n  gl.linkProgram(program);\n\n  // Check the link status\n  const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (!linked) {\n    // something went wrong with the link\n    const lastError = gl.getProgramInfoLog(program);\n    errFn(\"Error in program linking:\" + lastError);\n\n    gl.deleteProgram(program);\n    return null;\n  }\n  return program;\n}\n\n/**\n * Loads a shader from a script tag.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} scriptId The id of the script tag.\n * @param {number} opt_shaderType The type of shader. If not passed in it will\n *     be derived from the type of the script tag.\n * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors.\n * @return {WebGLShader} The created shader.\n */\nexport function createShaderFromScript(\n  gl,\n  scriptId,\n  opt_shaderType,\n  opt_errorCallback\n) {\n  let shaderSource = \"\";\n  let shaderType;\n  const shaderScript = document.getElementById(scriptId);\n  if (!shaderScript) {\n    throw \"*** Error: unknown script element\" + scriptId;\n  }\n  shaderSource = shaderScript.text;\n\n  if (!opt_shaderType) {\n    if (shaderScript.type === \"x-shader/x-vertex\") {\n      shaderType = gl.VERTEX_SHADER;\n    } else if (shaderScript.type === \"x-shader/x-fragment\") {\n      shaderType = gl.FRAGMENT_SHADER;\n    } else if (\n      shaderType !== gl.VERTEX_SHADER &&\n      shaderType !== gl.FRAGMENT_SHADER\n    ) {\n      throw \"*** Error: unknown shader type\";\n    }\n  }\n\n  return loadShader(\n    gl,\n    shaderSource,\n    opt_shaderType ? opt_shaderType : shaderType,\n    opt_errorCallback\n  );\n}\n\nconst defaultShaderType = [\"VERTEX_SHADER\", \"FRAGMENT_SHADER\"];\n\n/**\n * Creates a program from 2 script tags.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderScriptIds Array of ids of the script\n *        tags for the shaders. The first is assumed to be the\n *        vertex shader, the second the fragment shader.\n * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram} The created program.\n * @memberOf module:webgl-utils\n */\nexport function createProgramFromScripts(\n  gl,\n  shaderScriptIds,\n  opt_attribs,\n  opt_locations,\n  opt_errorCallback\n) {\n  const shaders = [];\n  for (let ii = 0; ii < shaderScriptIds.length; ++ii) {\n    shaders.push(\n      createShaderFromScript(\n        gl,\n        shaderScriptIds[ii],\n        gl[defaultShaderType[ii]],\n        opt_errorCallback\n      )\n    );\n  }\n  return createProgram(\n    gl,\n    shaders,\n    opt_attribs,\n    opt_locations,\n    opt_errorCallback\n  );\n}\n\n/**\n * Creates a program from 2 sources.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSourcess Array of sources for the\n *        shaders. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram} The created program.\n * @memberOf module:webgl-utils\n */\nexport function createProgramFromSources(\n  gl,\n  shaderSources,\n  opt_attribs,\n  opt_locations,\n  opt_errorCallback\n) {\n  const shaders = [];\n  for (let ii = 0; ii < shaderSources.length; ++ii) {\n    shaders.push(\n      loadShader(\n        gl,\n        shaderSources[ii],\n        gl[defaultShaderType[ii]],\n        opt_errorCallback\n      )\n    );\n  }\n  return createProgram(\n    gl,\n    shaders,\n    opt_attribs,\n    opt_locations,\n    opt_errorCallback\n  );\n}\n\n/**\n * Returns the corresponding bind point for a given sampler type\n */\nexport function getBindPointForSamplerType(gl, type) {\n  if (type === gl.SAMPLER_2D) return gl.TEXTURE_2D; // eslint-disable-line\n  if (type === gl.SAMPLER_CUBE) return gl.TEXTURE_CUBE_MAP; // eslint-disable-line\n  return undefined;\n}\n\n/**\n * @typedef {Object.<string, function>} Setters\n */\n\n/**\n * Creates setter functions for all uniforms of a shader\n * program.\n *\n * @see {@link module:webgl-utils.setUniforms}\n *\n * @param {WebGLProgram} program the program to create setters for.\n * @returns {Object.<string, function>} an object with a setter by name for each uniform\n * @memberOf module:webgl-utils\n */\nexport function createUniformSetters(gl, program) {\n  let textureUnit = 0;\n\n  /**\n   * Creates a setter for a uniform of the given program with it's\n   * location embedded in the setter.\n   * @param {WebGLProgram} program\n   * @param {WebGLUniformInfo} uniformInfo\n   * @returns {function} the created setter.\n   */\n  function createUniformSetter(program, uniformInfo) {\n    const location = gl.getUniformLocation(program, uniformInfo.name);\n    const type = uniformInfo.type;\n    let info = uniformInfo;\n    // Check if this uniform is an array\n    const isArray =\n      uniformInfo.size > 1 && uniformInfo.name.substr(-3) === \"[0]\";\n    if (type === gl.FLOAT && isArray) {\n      return function (v) {\n        gl.uniform1fv(location, v);\n      };\n    }\n    if (type === gl.FLOAT) {\n      return function (v) {\n        gl.uniform1f(location, v);\n      };\n    }\n    if (type === gl.FLOAT_VEC2) {\n      return function (v) {\n        gl.uniform2fv(location, v);\n      };\n    }\n    if (type === gl.FLOAT_VEC3) {\n      return function (v) {\n        gl.uniform3fv(location, v);\n      };\n    }\n    if (type === gl.FLOAT_VEC4) {\n      return function (v) {\n        gl.uniform4fv(location, v);\n      };\n    }\n    if (type === gl.INT && isArray) {\n      return function (v) {\n        gl.uniform1iv(location, v);\n      };\n    }\n    if (type === gl.INT) {\n      return function (v) {\n        gl.uniform1i(location, v);\n      };\n    }\n    if (type === gl.INT_VEC2) {\n      return function (v) {\n        gl.uniform2iv(location, v);\n      };\n    }\n    if (type === gl.INT_VEC3) {\n      return function (v) {\n        gl.uniform3iv(location, v);\n      };\n    }\n    if (type === gl.INT_VEC4) {\n      return function (v) {\n        gl.uniform4iv(location, v);\n      };\n    }\n    if (type === gl.BOOL) {\n      return function (v) {\n        gl.uniform1iv(location, v);\n      };\n    }\n    if (type === gl.BOOL_VEC2) {\n      return function (v) {\n        gl.uniform2iv(location, v);\n      };\n    }\n    if (type === gl.BOOL_VEC3) {\n      return function (v) {\n        gl.uniform3iv(location, v);\n      };\n    }\n    if (type === gl.BOOL_VEC4) {\n      return function (v) {\n        gl.uniform4iv(location, v);\n      };\n    }\n    if (type === gl.FLOAT_MAT2) {\n      return function (v) {\n        gl.uniformMatrix2fv(location, false, v);\n      };\n    }\n    if (type === gl.FLOAT_MAT3) {\n      return function (v) {\n        gl.uniformMatrix3fv(location, false, v);\n      };\n    }\n    if (type === gl.FLOAT_MAT4) {\n      return function (v) {\n        gl.uniformMatrix4fv(location, false, v);\n      };\n    }\n    if ((type === gl.SAMPLER_2D || type === gl.SAMPLER_CUBE) && isArray) {\n      const units = [];\n      for (let ii = 0; ii < info.size; ++ii) {\n        units.push(textureUnit++);\n      }\n      return (function (bindPoint, units) {\n        return function (textures) {\n          gl.uniform1iv(location, units);\n          textures.forEach(function (texture, index) {\n            gl.activeTexture(gl.TEXTURE0 + units[index]);\n            gl.bindTexture(bindPoint, texture);\n          });\n        };\n      })(getBindPointForSamplerType(gl, type), units);\n    }\n    if (type === gl.SAMPLER_2D || type === gl.SAMPLER_CUBE) {\n      return (function (bindPoint, unit) {\n        return function (texture) {\n          gl.uniform1i(location, unit);\n          gl.activeTexture(gl.TEXTURE0 + unit);\n          gl.bindTexture(bindPoint, texture);\n        };\n      })(getBindPointForSamplerType(gl, type), textureUnit++);\n    }\n    throw \"unknown type: 0x\" + type.toString(16); // we should never get here.\n  }\n\n  const uniformSetters = {};\n  const numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    if (!uniformInfo) {\n      break;\n    }\n    let name = uniformInfo.name;\n    // remove the array suffix.\n    if (name.substr(-3) === \"[0]\") {\n      name = name.substr(0, name.length - 3);\n    }\n    const setter = createUniformSetter(program, uniformInfo);\n    uniformSetters[name] = setter;\n  }\n  return uniformSetters;\n}\n\n/**\n * Set uniforms and binds related textures.\n *\n * Example:\n *\n *     let programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\"]);\n *\n *     let tex1 = gl.createTexture();\n *     let tex2 = gl.createTexture();\n *\n *     ... assume we setup the textures with data ...\n *\n *     let uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the textures AND set the\n * uniforms.\n *\n *     setUniforms(programInfo.uniformSetters, uniforms);\n *\n * For the example above it is equivalent to\n *\n *     let texUnit = 0;\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex1);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex2);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\n *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\n *     gl.uniformMatrix4fv(u_someMatrix, false, [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ]);\n *\n * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\n *\n *     let uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *     };\n *\n *     let moreUniforms {\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     setUniforms(programInfo.uniformSetters, uniforms);\n *     setUniforms(programInfo.uniformSetters, moreUniforms);\n *\n * @param {Object.<string, function>|module:webgl-utils.ProgramInfo} setters the setters returned from\n *        `createUniformSetters` or a ProgramInfo from {@link module:webgl-utils.createProgramInfo}.\n * @param {Object.<string, value>} an object with values for the\n *        uniforms.\n * @memberOf module:webgl-utils\n */\nexport function setUniforms(setters, ...values) {\n  setters = setters.uniformSetters || setters;\n  for (const uniforms of values) {\n    Object.keys(uniforms).forEach(function (name) {\n      const setter = setters[name];\n      if (setter) {\n        setter(uniforms[name]);\n      }\n    });\n  }\n}\n\n/**\n * Creates setter functions for all attributes of a shader\n * program. You can pass this to {@link module:webgl-utils.setBuffersAndAttributes} to set all your buffers and attributes.\n *\n * @see {@link module:webgl-utils.setAttributes} for example\n * @param {WebGLProgram} program the program to create setters for.\n * @return {Object.<string, function>} an object with a setter for each attribute by name.\n * @memberOf module:webgl-utils\n */\nexport function createAttributeSetters(gl, program) {\n  const attribSetters = {};\n\n  function createAttribSetter(index) {\n    return function (b) {\n      if (b.value) {\n        gl.disableVertexAttribArray(index);\n        switch (b.value.length) {\n          case 4:\n            gl.vertexAttrib4fv(index, b.value);\n            break;\n          case 3:\n            gl.vertexAttrib3fv(index, b.value);\n            break;\n          case 2:\n            gl.vertexAttrib2fv(index, b.value);\n            break;\n          case 1:\n            gl.vertexAttrib1fv(index, b.value);\n            break;\n          default:\n            throw new Error(\n              \"the length of a float constant value must be between 1 and 4!\"\n            );\n        }\n      } else {\n        gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n        gl.enableVertexAttribArray(index);\n        gl.vertexAttribPointer(\n          index,\n          b.numComponents || b.size,\n          b.type || gl.FLOAT,\n          b.normalize || false,\n          b.stride || 0,\n          b.offset || 0\n        );\n      }\n    };\n  }\n\n  const numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n  for (let ii = 0; ii < numAttribs; ++ii) {\n    const attribInfo = gl.getActiveAttrib(program, ii);\n    if (!attribInfo) {\n      break;\n    }\n    const index = gl.getAttribLocation(program, attribInfo.name);\n    attribSetters[attribInfo.name] = createAttribSetter(index);\n  }\n\n  return attribSetters;\n}\n\n/**\n * Sets attributes and binds buffers (deprecated... use {@link module:webgl-utils.setBuffersAndAttributes})\n *\n * Example:\n *\n *     let program = createProgramFromScripts(\n *         gl, [\"some-vs\", \"some-fs\"]);\n *\n *     let attribSetters = createAttributeSetters(program);\n *\n *     let positionBuffer = gl.createBuffer();\n *     let texcoordBuffer = gl.createBuffer();\n *\n *     let attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setAttributes(attribSetters, attribs);\n *\n * Properties of attribs. For each attrib you can add\n * properties:\n *\n * *   type: the type of data in the buffer. Default = gl.FLOAT\n * *   normalize: whether or not to normalize the data. Default = false\n * *   stride: the stride. Default = 0\n * *   offset: offset into the buffer. Default = 0\n *\n * For example if you had 3 value float positions, 2 value\n * float texcoord and 4 value uint8 colors you'd setup your\n * attribs like this\n *\n *     let attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *       a_color: {\n *         buffer: colorBuffer,\n *         numComponents: 4,\n *         type: gl.UNSIGNED_BYTE,\n *         normalize: true,\n *       },\n *     };\n *\n * @param {Object.<string, function>|model:webgl-utils.ProgramInfo} setters Attribute setters as returned from createAttributeSetters or a ProgramInfo as returned {@link module:webgl-utils.createProgramInfo}\n * @param {Object.<string, module:webgl-utils.AttribInfo>} attribs AttribInfos mapped by attribute name.\n * @memberOf module:webgl-utils\n * @deprecated use {@link module:webgl-utils.setBuffersAndAttributes}\n */\nexport function setAttributes(setters, attribs) {\n  setters = setters.attribSetters || setters;\n  Object.keys(attribs).forEach(function (name) {\n    const setter = setters[name];\n    if (setter) {\n      setter(attribs[name]);\n    }\n  });\n}\n\n/**\n * Creates a vertex array object and then sets the attributes\n * on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:webgl-utils.AttribInfo>} attribs AttribInfos mapped by attribute name.\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n */\nexport function createVAOAndSetAttributes(gl, setters, attribs, indices) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  setAttributes(setters, attribs);\n  if (indices) {\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indices);\n  }\n  // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\n  // like when creating buffers for other stuff will mess up this VAO's binding\n  gl.bindVertexArray(null);\n  return vao;\n}\n\n/**\n * Creates a vertex array object and then sets the attributes\n * on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {Object.<string, function>| module:webgl-utils.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\n * @param {module:webgl-utils:BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n */\nexport function createVAOFromBufferInfo(gl, programInfo, bufferInfo) {\n  return createVAOAndSetAttributes(\n    gl,\n    programInfo.attribSetters || programInfo,\n    bufferInfo.attribs,\n    bufferInfo.indices\n  );\n}\n\n/**\n * @typedef {Object} ProgramInfo\n * @property {WebGLProgram} program A shader program\n * @property {Object<string, function>} uniformSetters: object of setters as returned from createUniformSetters,\n * @property {Object<string, function>} attribSetters: object of setters as returned from createAttribSetters,\n * @memberOf module:webgl-utils\n */\n\n/**\n * Creates a ProgramInfo from 2 sources.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSourcess Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:webgl-utils.ProgramInfo} The created program.\n * @memberOf module:webgl-utils\n */\nexport function createProgramInfo(\n  gl,\n  shaderSources,\n  opt_attribs,\n  opt_locations,\n  opt_errorCallback\n) {\n  shaderSources = shaderSources.map(function (source) {\n    const script = document.getElementById(source);\n    return script ? script.text : source;\n  });\n  const program = createProgramFromSources(\n    gl,\n    shaderSources,\n    opt_attribs,\n    opt_locations,\n    opt_errorCallback\n  );\n  if (!program) {\n    return null;\n  }\n  const uniformSetters = createUniformSetters(gl, program);\n  const attribSetters = createAttributeSetters(gl, program);\n  return {\n    program: program,\n    uniformSetters: uniformSetters,\n    attribSetters: attribSetters,\n  };\n}\n\n/**\n * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\n *\n * Example:\n *\n *     let programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\"]);\n *\n *     let arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *     };\n *\n *     let bufferInfo = createBufferInfoFromArrays(gl, arrays);\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setBuffersAndAttributes(programInfo.attribSetters, bufferInfo);\n *\n * For the example above it is equivilent to\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n *     gl.enableVertexAttribArray(a_positionLocation);\n *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n *     gl.enableVertexAttribArray(a_texcoordLocation);\n *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {Object.<string, function>} setters Attribute setters as returned from `createAttributeSetters`\n * @param {module:webgl-utils.BufferInfo} buffers a BufferInfo as returned from `createBufferInfoFromArrays`.\n * @memberOf module:webgl-utils\n */\nexport function setBuffersAndAttributes(gl, setters, buffers) {\n  setAttributes(setters, buffers.attribs);\n  if (buffers.indices) {\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\n  }\n}\n\n// Add your prefix here.\nconst browserPrefixes = [\"\", \"MOZ_\", \"OP_\", \"WEBKIT_\"];\n\n/**\n * Given an extension name like WEBGL_compressed_texture_s3tc\n * returns the supported version extension, like\n * WEBKIT_WEBGL_compressed_teture_s3tc\n * @param {string} name Name of extension to look for\n * @return {WebGLExtension} The extension or undefined if not\n *     found.\n * @memberOf module:webgl-utils\n */\nexport function getExtensionWithKnownPrefixes(gl, name) {\n  for (let ii = 0; ii < browserPrefixes.length; ++ii) {\n    const prefixedName = browserPrefixes[ii] + name;\n    const ext = gl.getExtension(prefixedName);\n    if (ext) {\n      return ext;\n    }\n  }\n  return undefined;\n}\n\n/**\n * Resize a canvas to match the size its displayed.\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] amount to multiply by.\n *    Pass in window.devicePixelRatio for native pixels.\n * @return {boolean} true if the canvas was resized.\n * @memberOf module:webgl-utils\n */\nexport function resizeCanvasToDisplaySize(canvas, multiplier) {\n  multiplier = multiplier || 1;\n  const width = (canvas.clientWidth * multiplier) | 0;\n  const height = (canvas.clientHeight * multiplier) | 0;\n  if (canvas.width !== width || canvas.height !== height) {\n    canvas.width = width;\n    canvas.height = height;\n    return true;\n  }\n  return false;\n}\n\n// Add `push` to a typed array. It just keeps a 'cursor'\n// and allows use to `push` values into the array so we\n// don't have to manually compute offsets\nexport function augmentTypedArray(typedArray, numComponents) {\n  let cursor = 0;\n  typedArray.push = function () {\n    for (let ii = 0; ii < arguments.length; ++ii) {\n      const value = arguments[ii];\n      if (\n        value instanceof Array ||\n        (value.buffer && value.buffer instanceof ArrayBuffer)\n      ) {\n        for (let jj = 0; jj < value.length; ++jj) {\n          typedArray[cursor++] = value[jj];\n        }\n      } else {\n        typedArray[cursor++] = value;\n      }\n    }\n  };\n  typedArray.reset = function (opt_index) {\n    cursor = opt_index || 0;\n  };\n  typedArray.numComponents = numComponents;\n  Object.defineProperty(typedArray, \"numElements\", {\n    get: function () {\n      return (this.length / this.numComponents) | 0;\n    },\n  });\n  return typedArray;\n}\n\n/**\n * creates a typed array with a `push`  export  function attached\n * so that you can easily *push* values.\n *\n * `push` can take multiple arguments. If an argument is an array each element\n * of the array will be added to the typed array.\n *\n * Example:\n *\n *     let array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values\n *     array.push(1, 2, 3);\n *     array.push([4, 5, 6]);\n *     // array now contains [1, 2, 3, 4, 5, 6]\n *\n * Also has `numComponents` and `numElements` properties.\n *\n * @param {number} numComponents number of components\n * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.\n * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.\n * @return {ArrayBuffer} A typed array.\n * @memberOf module:webgl-utils\n */\nexport function createAugmentedTypedArray(\n  numComponents,\n  numElements,\n  opt_type\n) {\n  const Type = opt_type || Float32Array;\n  return augmentTypedArray(\n    new Type(numComponents * numElements),\n    numComponents\n  );\n}\n\nexport function createBufferFromTypedArray(gl, array, type, drawType) {\n  type = type || gl.ARRAY_BUFFER;\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(type, buffer);\n  gl.bufferData(type, array, drawType || gl.STATIC_DRAW);\n  return buffer;\n}\n\nexport function allButIndices(name) {\n  return name !== \"indices\";\n}\n\nexport function createMapping(obj) {\n  const mapping = {};\n  Object.keys(obj)\n    .filter(allButIndices)\n    .forEach(function (key) {\n      mapping[\"a_\" + key] = key;\n    });\n  return mapping;\n}\n\nexport function getGLTypeForTypedArray(gl, typedArray) {\n  if (typedArray instanceof Int8Array) {\n    return gl.BYTE;\n  } // eslint-disable-line\n  if (typedArray instanceof Uint8Array) {\n    return gl.UNSIGNED_BYTE;\n  } // eslint-disable-line\n  if (typedArray instanceof Int16Array) {\n    return gl.SHORT;\n  } // eslint-disable-line\n  if (typedArray instanceof Uint16Array) {\n    return gl.UNSIGNED_SHORT;\n  } // eslint-disable-line\n  if (typedArray instanceof Int32Array) {\n    return gl.INT;\n  } // eslint-disable-line\n  if (typedArray instanceof Uint32Array) {\n    return gl.UNSIGNED_INT;\n  } // eslint-disable-line\n  if (typedArray instanceof Float32Array) {\n    return gl.FLOAT;\n  } // eslint-disable-line\n  throw \"unsupported typed array type\";\n}\n\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nexport function getNormalizationForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array) {\n    return true;\n  } // eslint-disable-line\n  if (typedArray instanceof Uint8Array) {\n    return true;\n  } // eslint-disable-line\n  return false;\n}\n\nexport function isArrayBuffer(a) {\n  return a.buffer && a.buffer instanceof ArrayBuffer;\n}\n\nexport function makeTypedArray(array, name) {\n  if (isArrayBuffer(array)) {\n    return array;\n  }\n\n  if (array.data && isArrayBuffer(array.data)) {\n    return array.data;\n  }\n\n  if (Array.isArray(array)) {\n    array = {\n      data: array,\n    };\n  }\n\n  if (!array.numComponents) {\n    array.numComponents = guessNumComponentsFromName(name, array.length);\n  }\n\n  let type = array.type;\n  if (!type) {\n    if (name === \"indices\") {\n      type = Uint16Array;\n    }\n  }\n  const typedArray = createAugmentedTypedArray(\n    array.numComponents,\n    (array.data.length / array.numComponents) | 0,\n    type\n  );\n  typedArray.push(array.data);\n  return typedArray;\n}\n\n/**\n * @typedef {Object} AttribInfo\n * @property {number} [numComponents] the number of components for this attribute.\n * @property {number} [size] the number of components for this attribute.\n * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\n * @property {boolean} [normalized] whether or not to normalize the data. Default = false\n * @property {number} [offset] offset into buffer in bytes. Default = 0\n * @property {number} [stride] the stride in bytes per element. Default = 0\n * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\n * @memberOf module:webgl-utils\n */\n\n/**\n * Creates a set of attribute data and WebGLBuffers from set of arrays\n *\n * Given\n *\n *      let arrays = {\n *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\n *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *      };\n *\n * returns something like\n *\n *      let attribs = {\n *        a_position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        a_texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        a_normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        a_color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\n *      };\n *\n * @param {WebGLRenderingContext} gl The webgl rendering context.\n * @param {Object.<string, array|typedarray>} arrays The arrays\n * @param {Object.<string, string>} [opt_mapping] mapping from attribute name to array name.\n *     if not specified defaults to \"a_name\" -> \"name\".\n * @return {Object.<string, module:webgl-utils.AttribInfo>} the attribs\n * @memberOf module:webgl-utils\n */\nexport function createAttribsFromArrays(gl, arrays, opt_mapping) {\n  const mapping = opt_mapping || createMapping(arrays);\n  const attribs = {};\n  Object.keys(mapping).forEach(function (attribName) {\n    const bufferName = mapping[attribName];\n    const origArray = arrays[bufferName];\n    if (origArray.value) {\n      attribs[attribName] = {\n        value: origArray.value,\n      };\n    } else {\n      const array = makeTypedArray(origArray, bufferName);\n      attribs[attribName] = {\n        buffer: createBufferFromTypedArray(gl, array),\n        numComponents:\n          origArray.numComponents ||\n          array.numComponents ||\n          guessNumComponentsFromName(bufferName),\n        type: getGLTypeForTypedArray(gl, array),\n        normalize: getNormalizationForTypedArray(array),\n      };\n    }\n  });\n  return attribs;\n}\n\nexport function getArray(array) {\n  return array.length ? array : array.data;\n}\n\nconst texcoordRE = /coord|texture/i;\nconst colorRE = /color|colour/i;\n\nexport function guessNumComponentsFromName(name, length) {\n  let numComponents;\n  if (texcoordRE.test(name)) {\n    numComponents = 2;\n  } else if (colorRE.test(name)) {\n    numComponents = 4;\n  } else {\n    numComponents = 3; // position, normals, indices ...\n  }\n\n  if (length % numComponents > 0) {\n    throw new Error(\n      `Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`\n    );\n  }\n\n  return numComponents;\n}\n\nexport function getNumComponents(array, arrayName) {\n  return (\n    array.numComponents ||\n    array.size ||\n    guessNumComponentsFromName(arrayName, getArray(array).length)\n  );\n}\n\n/**\n * tries to get the number of elements from a set of arrays.\n */\nconst positionKeys = [\"position\", \"positions\", \"a_position\"];\nexport function getNumElementsFromNonIndexedArrays(arrays) {\n  let key;\n  for (const k of positionKeys) {\n    if (k in arrays) {\n      key = k;\n      break;\n    }\n  }\n  key = key || Object.keys(arrays)[0];\n  const array = arrays[key];\n  const length = getArray(array).length;\n  const numComponents = getNumComponents(array, key);\n  const numElements = length / numComponents;\n  if (length % numComponents > 0) {\n    throw new Error(\n      `numComponents ${numComponents} not correct for length ${length}`\n    );\n  }\n  return numElements;\n}\n\n/**\n * @typedef {Object} BufferInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\n * @property {Object.<string, module:webgl-utils.AttribInfo>} attribs The attribs approriate to call `setAttributes`\n * @memberOf module:webgl-utils\n */\n\n/**\n * Creates a BufferInfo from an object of arrays.\n *\n * This can be passed to {@link module:webgl-utils.setBuffersAndAttributes} and to\n * {@link module:webgl-utils:drawBufferInfo}.\n *\n * Given an object like\n *\n *     let arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n *  Creates an BufferInfo like this\n *\n *     bufferInfo = {\n *       numElements: 4,        // or whatever the number of elements is\n *       indices: WebGLBuffer,  // this property will not exist if there are no indices\n *       attribs: {\n *         a_position: { buffer: WebGLBuffer, numComponents: 3, },\n *         a_normal:   { buffer: WebGLBuffer, numComponents: 3, },\n *         a_texcoord: { buffer: WebGLBuffer, numComponents: 2, },\n *       },\n *     };\n *\n *  The properties of arrays can be JavaScript arrays in which case the number of components\n *  will be guessed.\n *\n *     let arrays = {\n *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\n *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\n *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n *        indices:  [0, 1, 2, 1, 2, 3],\n *     };\n *\n *  They can also by TypedArrays\n *\n *     let arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *\n *  Or augmentedTypedArrays\n *\n *     let positions = createAugmentedTypedArray(3, 4);\n *     let texcoords = createAugmentedTypedArray(2, 4);\n *     let normals   = createAugmentedTypedArray(3, 4);\n *     let indices   = createAugmentedTypedArray(3, 2, Uint16Array);\n *\n *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\n *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\n *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n *     indices.push([0, 1, 2, 1, 2, 3]);\n *\n *     let arrays = {\n *        position: positions,\n *        texcoord: texcoords,\n *        normal:   normals,\n *        indices:  indices,\n *     };\n *\n * For the last example it is equivalent to\n *\n *     let bufferInfo = {\n *       attribs: {\n *         a_position: { numComponents: 3, buffer: gl.createBuffer(), },\n *         a_texcoods: { numComponents: 2, buffer: gl.createBuffer(), },\n *         a_normals: { numComponents: 3, buffer: gl.createBuffer(), },\n *       },\n *       indices: gl.createBuffer(),\n *       numElements: 6,\n *     };\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_position.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_texcoord.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_normal.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\n *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {Object.<string, array|object|typedarray>} arrays Your data\n * @param {Object.<string, string>} [opt_mapping] an optional mapping of attribute to array name.\n *    If not passed in it's assumed the array names will be mapped to an attribute\n *    of the same name with \"a_\" prefixed to it. An other words.\n *\n *        let arrays = {\n *           position: ...,\n *           texcoord: ...,\n *           normal:   ...,\n *           indices:  ...,\n *        };\n *\n *        bufferInfo = createBufferInfoFromArrays(gl, arrays);\n *\n *    Is the same as\n *\n *        let arrays = {\n *           position: ...,\n *           texcoord: ...,\n *           normal:   ...,\n *           indices:  ...,\n *        };\n *\n *        let mapping = {\n *          a_position: \"position\",\n *          a_texcoord: \"texcoord\",\n *          a_normal:   \"normal\",\n *        };\n *\n *        bufferInfo = createBufferInfoFromArrays(gl, arrays, mapping);\n *\n * @return {module:webgl-utils.BufferInfo} A BufferInfo\n * @memberOf module:webgl-utils\n */\nexport function createBufferInfoFromArrays(gl, arrays, opt_mapping) {\n  const bufferInfo = {\n    attribs: createAttribsFromArrays(gl, arrays, opt_mapping),\n  };\n  let indices = arrays.indices;\n  if (indices) {\n    indices = makeTypedArray(indices, \"indices\");\n    bufferInfo.indices = createBufferFromTypedArray(\n      gl,\n      indices,\n      gl.ELEMENT_ARRAY_BUFFER\n    );\n    bufferInfo.numElements = indices.length;\n  } else {\n    bufferInfo.numElements = getNumElementsFromNonIndexedArrays(arrays);\n  }\n\n  return bufferInfo;\n}\n\n/**\n * Creates buffers from typed arrays\n *\n * Given something like this\n *\n *     let arrays = {\n *        positions: [1, 2, 3],\n *        normals: [0, 0, 1],\n *     }\n *\n * returns something like\n *\n *     buffers = {\n *       positions: WebGLBuffer,\n *       normals: WebGLBuffer,\n *     }\n *\n * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {Object<string, array|typedarray>} arrays\n * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\n * @memberOf module:webgl-utils\n */\nexport function createBuffersFromArrays(gl, arrays) {\n  const buffers = {};\n  Object.keys(arrays).forEach(function (key) {\n    const type = key === \"indices\" ? gl.ELEMENT_ARRAY_BUFFER : gl.ARRAY_BUFFER;\n    const array = makeTypedArray(arrays[key], 'name');\n    buffers[key] = createBufferFromTypedArray(gl, array, type);\n  });\n\n  // hrm\n  if (arrays.indices) {\n    buffers.numElements = arrays.indices.length;\n  } else if (arrays.position) {\n    buffers.numElements = arrays.position.length / 3;\n  }\n\n  return buffers;\n}\n\n/**\n * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\n *\n * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\n * but calling this means if you switch from indexed data to non-indexed\n * data you don't have to remember to update your draw call.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:webgl-utils.BufferInfo} bufferInfo as returned from createBufferInfoFromArrays\n * @param {enum} [primitiveType] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...)\n * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\n * @param {number} [offset] An optional offset. Defaults to 0.\n * @memberOf module:webgl-utils\n */\nexport function drawBufferInfo(gl, bufferInfo, primitiveType, count, offset) {\n  const indices = bufferInfo.indices;\n  primitiveType = primitiveType === undefined ? gl.TRIANGLES : primitiveType;\n  const numElements = count === undefined ? bufferInfo.numElements : count;\n  offset = offset === undefined ? 0 : offset;\n  if (indices) {\n    gl.drawElements(primitiveType, numElements, gl.UNSIGNED_SHORT, offset);\n  } else {\n    gl.drawArrays(primitiveType, offset, numElements);\n  }\n}\n\n/**\n * @typedef {Object} DrawObject\n * @property {module:webgl-utils.ProgramInfo} programInfo A ProgramInfo as returned from createProgramInfo\n * @property {module:webgl-utils.BufferInfo} bufferInfo A BufferInfo as returned from createBufferInfoFromArrays\n * @property {Object<string, ?>} uniforms The values for the uniforms\n * @memberOf module:webgl-utils\n */\n\n/**\n * Draws a list of objects\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {DrawObject[]} objectsToDraw an array of objects to draw.\n * @memberOf module:webgl-utils\n */\nexport function drawObjectList(gl, objectsToDraw) {\n  let lastUsedProgramInfo = null;\n  let lastUsedBufferInfo = null;\n\n  objectsToDraw.forEach(function (object) {\n    const programInfo = object.programInfo;\n    const bufferInfo = object.bufferInfo;\n    let bindBuffers = false;\n\n    if (programInfo !== lastUsedProgramInfo) {\n      lastUsedProgramInfo = programInfo;\n      gl.useProgram(programInfo.program);\n      bindBuffers = true;\n    }\n\n    // Setup all the needed attributes.\n    if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\n      lastUsedBufferInfo = bufferInfo;\n      setBuffersAndAttributes(gl, programInfo.attribSetters, bufferInfo);\n    }\n\n    // Set the uniforms.\n    setUniforms(programInfo.uniformSetters, object.uniforms);\n\n    // Draw\n    drawBufferInfo(gl, bufferInfo);\n  });\n}\n\nexport function glEnumToString(gl, v) {\n  const results = [];\n  for (const key in gl) {\n    if (gl[key] === v) {\n      results.push(key);\n    }\n  }\n  return results.length ? results.join(\" | \") : `0x${v.toString(16)}`;\n}\n","/*\n * Copyright 2014, Gregg Tavares.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Gregg Tavares. nor the names of his\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nlet MatType = Float32Array;\n\n/**\n * Sets the type this library creates for a Mat4\n * @param {constructor} Ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Mat4\n */\nfunction setDefaultType(Ctor) {\n  const OldType = MatType;\n  MatType = Ctor;\n  return OldType;\n}\n\n/**\n * Takes two 4-by-4 matrices, a and b, and computes the product in the order\n * that pre-composes b with a.  In other words, the matrix returned will\n * transform by b first and then a.  Note this is subtly different from just\n * multiplying the matrices together.  For given a and b, this function returns\n * the same object in both row-major and column-major mode.\n * @param {Matrix4} a A matrix.\n * @param {Matrix4} b A matrix.\n * @param {Matrix4} [dst] optional matrix to store result\n * @return {Matrix4} dst or a new matrix if none provided\n */\nfunction multiply(a, b, dst) {\n  dst = dst || new MatType(16);\n  var b00 = b[0 * 4 + 0];\n  var b01 = b[0 * 4 + 1];\n  var b02 = b[0 * 4 + 2];\n  var b03 = b[0 * 4 + 3];\n  var b10 = b[1 * 4 + 0];\n  var b11 = b[1 * 4 + 1];\n  var b12 = b[1 * 4 + 2];\n  var b13 = b[1 * 4 + 3];\n  var b20 = b[2 * 4 + 0];\n  var b21 = b[2 * 4 + 1];\n  var b22 = b[2 * 4 + 2];\n  var b23 = b[2 * 4 + 3];\n  var b30 = b[3 * 4 + 0];\n  var b31 = b[3 * 4 + 1];\n  var b32 = b[3 * 4 + 2];\n  var b33 = b[3 * 4 + 3];\n  var a00 = a[0 * 4 + 0];\n  var a01 = a[0 * 4 + 1];\n  var a02 = a[0 * 4 + 2];\n  var a03 = a[0 * 4 + 3];\n  var a10 = a[1 * 4 + 0];\n  var a11 = a[1 * 4 + 1];\n  var a12 = a[1 * 4 + 2];\n  var a13 = a[1 * 4 + 3];\n  var a20 = a[2 * 4 + 0];\n  var a21 = a[2 * 4 + 1];\n  var a22 = a[2 * 4 + 2];\n  var a23 = a[2 * 4 + 3];\n  var a30 = a[3 * 4 + 0];\n  var a31 = a[3 * 4 + 1];\n  var a32 = a[3 * 4 + 2];\n  var a33 = a[3 * 4 + 3];\n  dst[0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;\n  dst[1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;\n  dst[2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;\n  dst[3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;\n  dst[4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;\n  dst[5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;\n  dst[6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;\n  dst[7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;\n  dst[8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;\n  dst[9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;\n  dst[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;\n  dst[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;\n  dst[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;\n  dst[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;\n  dst[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;\n  dst[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;\n  return dst;\n}\n\n/**\n * adds 2 vectors3s\n * @param {Vector3} a a\n * @param {Vector3} b b\n * @param {Vector3} dst optional vector3 to store result\n * @return {Vector3} dst or new Vector3 if not provided\n * @memberOf module:webgl-3d-math\n */\nfunction addVectors(a, b, dst) {\n  dst = dst || new MatType(3);\n  dst[0] = a[0] + b[0];\n  dst[1] = a[1] + b[1];\n  dst[2] = a[2] + b[2];\n  return dst;\n}\n\n/**\n * subtracts 2 vectors3s\n * @param {Vector3} a a\n * @param {Vector3} b b\n * @param {Vector3} dst optional vector3 to store result\n * @return {Vector3} dst or new Vector3 if not provided\n * @memberOf module:webgl-3d-math\n */\nfunction subtractVectors(a, b, dst) {\n  dst = dst || new MatType(3);\n  dst[0] = a[0] - b[0];\n  dst[1] = a[1] - b[1];\n  dst[2] = a[2] - b[2];\n  return dst;\n}\n\n/**\n * scale vectors3\n * @param {Vector3} v vector\n * @param {Number} s scale\n * @param {Vector3} dst optional vector3 to store result\n * @return {Vector3} dst or new Vector3 if not provided\n * @memberOf module:webgl-3d-math\n */\nfunction scaleVector(v, s, dst) {\n  dst = dst || new MatType(3);\n  dst[0] = v[0] * s;\n  dst[1] = v[1] * s;\n  dst[2] = v[2] * s;\n  return dst;\n}\n\n/**\n * normalizes a vector.\n * @param {Vector3} v vector to normalize\n * @param {Vector3} dst optional vector3 to store result\n * @return {Vector3} dst or new Vector3 if not provided\n * @memberOf module:webgl-3d-math\n */\nfunction normalize(v, dst) {\n  dst = dst || new MatType(3);\n  var length = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n  // make sure we don't divide by 0.\n  if (length > 0.00001) {\n    dst[0] = v[0] / length;\n    dst[1] = v[1] / length;\n    dst[2] = v[2] / length;\n  }\n  return dst;\n}\n\n/**\n * Computes the length of a vector\n * @param {Vector3} v vector to take length of\n * @return {number} length of vector\n */\nfunction length(v) {\n  return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n}\n\n/**\n * Computes the length squared of a vector\n * @param {Vector3} v vector to take length of\n * @return {number} length sqaured of vector\n */\nfunction lengthSq(v) {\n  return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];\n}\n\n/**\n * Computes the cross product of 2 vectors3s\n * @param {Vector3} a a\n * @param {Vector3} b b\n * @param {Vector3} dst optional vector3 to store result\n * @return {Vector3} dst or new Vector3 if not provided\n * @memberOf module:webgl-3d-math\n */\nfunction cross(a, b, dst) {\n  dst = dst || new MatType(3);\n  dst[0] = a[1] * b[2] - a[2] * b[1];\n  dst[1] = a[2] * b[0] - a[0] * b[2];\n  dst[2] = a[0] * b[1] - a[1] * b[0];\n  return dst;\n}\n\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param {Vector3} a Operand vector.\n * @param {Vector3} b Operand vector.\n * @return {number} dot product\n * @memberOf module:webgl-3d-math\n */\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the distance squared between 2 points\n * @param {Vector3} a\n * @param {Vector3} b\n * @return {number} distance squared between a and b\n */\nfunction distanceSq(a, b) {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return dx * dx + dy * dy + dz * dz;\n}\n\n/**\n * Computes the distance between 2 points\n * @param {Vector3} a\n * @param {Vector3} b\n * @return {number} distance between a and b\n */\nfunction distance(a, b) {\n  return Math.sqrt(distanceSq(a, b));\n}\n\n/**\n * Makes an identity matrix.\n * @param {Matrix4} [dst] optional matrix to store result\n * @return {Matrix4} dst or a new matrix if none provided\n * @memberOf module:webgl-3d-math\n */\nfunction identity(dst) {\n  dst = dst || new MatType(16);\n\n  dst[0] = 1;\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = 1;\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Transposes a matrix.\n * @param {Matrix4} m matrix to transpose.\n * @param {Matrix4} [dst] optional matrix to store result\n * @return {Matrix4} dst or a new matrix if none provided\n * @memberOf module:webgl-3d-math\n */\nfunction transpose(m, dst) {\n  dst = dst || new MatType(16);\n\n  dst[0] = m[0];\n  dst[1] = m[4];\n  dst[2] = m[8];\n  dst[3] = m[12];\n  dst[4] = m[1];\n  dst[5] = m[5];\n  dst[6] = m[9];\n  dst[7] = m[13];\n  dst[8] = m[2];\n  dst[9] = m[6];\n  dst[10] = m[10];\n  dst[11] = m[14];\n  dst[12] = m[3];\n  dst[13] = m[7];\n  dst[14] = m[11];\n  dst[15] = m[15];\n\n  return dst;\n}\n\n/**\n * Creates a lookAt matrix.\n * This is a world matrix for a camera. In other words it will transform\n * from the origin to a place and orientation in the world. For a view\n * matrix take the inverse of this.\n * @param {Vector3} cameraPosition position of the camera\n * @param {Vector3} target position of the target\n * @param {Vector3} up direction\n * @param {Matrix4} [dst] optional matrix to store result\n * @return {Matrix4} dst or a new matrix if none provided\n * @memberOf module:webgl-3d-math\n */\nfunction lookAt(cameraPosition, target, up, dst) {\n  dst = dst || new MatType(16);\n  var zAxis = normalize(subtractVectors(cameraPosition, target));\n  var xAxis = normalize(cross(up, zAxis));\n  var yAxis = normalize(cross(zAxis, xAxis));\n\n  dst[0] = xAxis[0];\n  dst[1] = xAxis[1];\n  dst[2] = xAxis[2];\n  dst[3] = 0;\n  dst[4] = yAxis[0];\n  dst[5] = yAxis[1];\n  dst[6] = yAxis[2];\n  dst[7] = 0;\n  dst[8] = zAxis[0];\n  dst[9] = zAxis[1];\n  dst[10] = zAxis[2];\n  dst[11] = 0;\n  dst[12] = cameraPosition[0];\n  dst[13] = cameraPosition[1];\n  dst[14] = cameraPosition[2];\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from -1 to 1 in the z dimension.\n * @param {number} fieldOfViewInRadians field of view in y axis.\n * @param {number} aspect aspect of viewport (width / height)\n * @param {number} near near Z clipping plane\n * @param {number} far far Z clipping plane\n * @param {Matrix4} [dst] optional matrix to store result\n * @return {Matrix4} dst or a new matrix if none provided\n * @memberOf module:webgl-3d-math\n */\nfunction perspective(fieldOfViewInRadians, aspect, near, far, dst) {\n  dst = dst || new MatType(16);\n  var f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewInRadians);\n  var rangeInv = 1.0 / (near - far);\n\n  dst[0] = f / aspect;\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = f;\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = 0;\n  dst[10] = (near + far) * rangeInv;\n  dst[11] = -1;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = near * far * rangeInv * 2;\n  dst[15] = 0;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 orthographic projection matrix given the coordinates of the\n * planes defining the axis-aligned, box-shaped viewing volume.  The matrix\n * generated sends that box to the unit box.  Note that although left and right\n * are x coordinates and bottom and top are y coordinates, near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  We assume a unit box extending from -1 to 1 in the x and y\n * dimensions and from -1 to 1 in the z dimension.\n * @param {number} left The x coordinate of the left plane of the box.\n * @param {number} right The x coordinate of the right plane of the box.\n * @param {number} bottom The y coordinate of the bottom plane of the box.\n * @param {number} top The y coordinate of the right plane of the box.\n * @param {number} near The negative z coordinate of the near plane of the box.\n * @param {number} far The negative z coordinate of the far plane of the box.\n * @param {Matrix4} [dst] optional matrix to store result\n * @return {Matrix4} dst or a new matrix if none provided\n * @memberOf module:webgl-3d-math\n */\nfunction orthographic(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n\n  dst[0] = 2 / (right - left);\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = 2 / (top - bottom);\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = 0;\n  dst[10] = 2 / (near - far);\n  dst[11] = 0;\n  dst[12] = (left + right) / (left - right);\n  dst[13] = (bottom + top) / (bottom - top);\n  dst[14] = (near + far) / (near - far);\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from -1 to 1 in the z\n * dimension.\n * @param {number} left The x coordinate of the left plane of the box.\n * @param {number} right The x coordinate of the right plane of the box.\n * @param {number} bottom The y coordinate of the bottom plane of the box.\n * @param {number} top The y coordinate of the right plane of the box.\n * @param {number} near The negative z coordinate of the near plane of the box.\n * @param {number} far The negative z coordinate of the far plane of the box.\n * @param {Matrix4} [dst] optional matrix to store result\n * @return {Matrix4} dst or a new matrix if none provided\n * @memberOf module:webgl-3d-math\n */\nfunction frustum(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n\n  var dx = right - left;\n  var dy = top - bottom;\n  var dz = far - near;\n\n  dst[0] = (2 * near) / dx;\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = (2 * near) / dy;\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = (left + right) / dx;\n  dst[9] = (top + bottom) / dy;\n  dst[10] = -(far + near) / dz;\n  dst[11] = -1;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = (-2 * near * far) / dz;\n  dst[15] = 0;\n\n  return dst;\n}\n\n/**\n * Makes a translation matrix\n * @param {number} tx x translation.\n * @param {number} ty y translation.\n * @param {number} tz z translation.\n * @param {Matrix4} [dst] optional matrix to store result\n * @return {Matrix4} dst or a new matrix if none provided\n * @memberOf module:webgl-3d-math\n */\nfunction translation(tx, ty, tz, dst) {\n  dst = dst || new MatType(16);\n\n  dst[0] = 1;\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = 1;\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = tx;\n  dst[13] = ty;\n  dst[14] = tz;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Multiply by translation matrix.\n * @param {Matrix4} m matrix to multiply\n * @param {number} tx x translation.\n * @param {number} ty y translation.\n * @param {number} tz z translation.\n * @param {Matrix4} [dst] optional matrix to store result\n * @return {Matrix4} dst or a new matrix if none provided\n * @memberOf module:webgl-3d-math\n */\nfunction translate(m, tx, ty, tz, dst) {\n  // This is the optimized version of\n  // return multiply(m, translation(tx, ty, tz), dst);\n  dst = dst || new MatType(16);\n\n  var m00 = m[0];\n  var m01 = m[1];\n  var m02 = m[2];\n  var m03 = m[3];\n  var m10 = m[1 * 4 + 0];\n  var m11 = m[1 * 4 + 1];\n  var m12 = m[1 * 4 + 2];\n  var m13 = m[1 * 4 + 3];\n  var m20 = m[2 * 4 + 0];\n  var m21 = m[2 * 4 + 1];\n  var m22 = m[2 * 4 + 2];\n  var m23 = m[2 * 4 + 3];\n  var m30 = m[3 * 4 + 0];\n  var m31 = m[3 * 4 + 1];\n  var m32 = m[3 * 4 + 2];\n  var m33 = m[3 * 4 + 3];\n\n  if (m !== dst) {\n    dst[0] = m00;\n    dst[1] = m01;\n    dst[2] = m02;\n    dst[3] = m03;\n    dst[4] = m10;\n    dst[5] = m11;\n    dst[6] = m12;\n    dst[7] = m13;\n    dst[8] = m20;\n    dst[9] = m21;\n    dst[10] = m22;\n    dst[11] = m23;\n  }\n\n  dst[12] = m00 * tx + m10 * ty + m20 * tz + m30;\n  dst[13] = m01 * tx + m11 * ty + m21 * tz + m31;\n  dst[14] = m02 * tx + m12 * ty + m22 * tz + m32;\n  dst[15] = m03 * tx + m13 * ty + m23 * tz + m33;\n\n  return dst;\n}\n\n/**\n * Makes an x rotation matrix\n * @param {number} angleInRadians amount to rotate\n * @param {Matrix4} [dst] optional matrix to store result\n * @return {Matrix4} dst or a new matrix if none provided\n * @memberOf module:webgl-3d-math\n */\nfunction xRotation(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n\n  dst[0] = 1;\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = c;\n  dst[6] = s;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = -s;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Multiply by an x rotation matrix\n * @param {Matrix4} m matrix to multiply\n * @param {number} angleInRadians amount to rotate\n * @param {Matrix4} [dst] optional matrix to store result\n * @return {Matrix4} dst or a new matrix if none provided\n * @memberOf module:webgl-3d-math\n */\nfunction xRotate(m, angleInRadians, dst) {\n  // this is the optimized version of\n  // return multiply(m, xRotation(angleInRadians), dst);\n  dst = dst || new MatType(16);\n\n  var m10 = m[4];\n  var m11 = m[5];\n  var m12 = m[6];\n  var m13 = m[7];\n  var m20 = m[8];\n  var m21 = m[9];\n  var m22 = m[10];\n  var m23 = m[11];\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n\n  dst[4] = c * m10 + s * m20;\n  dst[5] = c * m11 + s * m21;\n  dst[6] = c * m12 + s * m22;\n  dst[7] = c * m13 + s * m23;\n  dst[8] = c * m20 - s * m10;\n  dst[9] = c * m21 - s * m11;\n  dst[10] = c * m22 - s * m12;\n  dst[11] = c * m23 - s * m13;\n\n  if (m !== dst) {\n    dst[0] = m[0];\n    dst[1] = m[1];\n    dst[2] = m[2];\n    dst[3] = m[3];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Makes an y rotation matrix\n * @param {number} angleInRadians amount to rotate\n * @param {Matrix4} [dst] optional matrix to store result\n * @return {Matrix4} dst or a new matrix if none provided\n * @memberOf module:webgl-3d-math\n */\nfunction yRotation(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n\n  dst[0] = c;\n  dst[1] = 0;\n  dst[2] = -s;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = 1;\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = s;\n  dst[9] = 0;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Multiply by an y rotation matrix\n * @param {Matrix4} m matrix to multiply\n * @param {number} angleInRadians amount to rotate\n * @param {Matrix4} [dst] optional matrix to store result\n * @return {Matrix4} dst or a new matrix if none provided\n * @memberOf module:webgl-3d-math\n */\nfunction yRotate(m, angleInRadians, dst) {\n  // this is the optimized version of\n  // return multiply(m, yRotation(angleInRadians), dst);\n  dst = dst || new MatType(16);\n\n  var m00 = m[0 * 4 + 0];\n  var m01 = m[0 * 4 + 1];\n  var m02 = m[0 * 4 + 2];\n  var m03 = m[0 * 4 + 3];\n  var m20 = m[2 * 4 + 0];\n  var m21 = m[2 * 4 + 1];\n  var m22 = m[2 * 4 + 2];\n  var m23 = m[2 * 4 + 3];\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n\n  dst[0] = c * m00 - s * m20;\n  dst[1] = c * m01 - s * m21;\n  dst[2] = c * m02 - s * m22;\n  dst[3] = c * m03 - s * m23;\n  dst[8] = c * m20 + s * m00;\n  dst[9] = c * m21 + s * m01;\n  dst[10] = c * m22 + s * m02;\n  dst[11] = c * m23 + s * m03;\n\n  if (m !== dst) {\n    dst[4] = m[4];\n    dst[5] = m[5];\n    dst[6] = m[6];\n    dst[7] = m[7];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Makes an z rotation matrix\n * @param {number} angleInRadians amount to rotate\n * @param {Matrix4} [dst] optional matrix to store result\n * @return {Matrix4} dst or a new matrix if none provided\n * @memberOf module:webgl-3d-math\n */\nfunction zRotation(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n\n  dst[0] = c;\n  dst[1] = s;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = -s;\n  dst[5] = c;\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Multiply by an z rotation matrix\n * @param {Matrix4} m matrix to multiply\n * @param {number} angleInRadians amount to rotate\n * @param {Matrix4} [dst] optional matrix to store result\n * @return {Matrix4} dst or a new matrix if none provided\n * @memberOf module:webgl-3d-math\n */\nfunction zRotate(m, angleInRadians, dst) {\n  // This is the optimized version of\n  // return multiply(m, zRotation(angleInRadians), dst);\n  dst = dst || new MatType(16);\n\n  var m00 = m[0 * 4 + 0];\n  var m01 = m[0 * 4 + 1];\n  var m02 = m[0 * 4 + 2];\n  var m03 = m[0 * 4 + 3];\n  var m10 = m[1 * 4 + 0];\n  var m11 = m[1 * 4 + 1];\n  var m12 = m[1 * 4 + 2];\n  var m13 = m[1 * 4 + 3];\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n\n  dst[0] = c * m00 + s * m10;\n  dst[1] = c * m01 + s * m11;\n  dst[2] = c * m02 + s * m12;\n  dst[3] = c * m03 + s * m13;\n  dst[4] = c * m10 - s * m00;\n  dst[5] = c * m11 - s * m01;\n  dst[6] = c * m12 - s * m02;\n  dst[7] = c * m13 - s * m03;\n\n  if (m !== dst) {\n    dst[8] = m[8];\n    dst[9] = m[9];\n    dst[10] = m[10];\n    dst[11] = m[11];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Makes an rotation matrix around an arbitrary axis\n * @param {Vector3} axis axis to rotate around\n * @param {number} angleInRadians amount to rotate\n * @param {Matrix4} [dst] optional matrix to store result\n * @return {Matrix4} dst or a new matrix if none provided\n * @memberOf module:webgl-3d-math\n */\nfunction axisRotation(axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  var x = axis[0];\n  var y = axis[1];\n  var z = axis[2];\n  var n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  var xx = x * x;\n  var yy = y * y;\n  var zz = z * z;\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  var oneMinusCosine = 1 - c;\n\n  dst[0] = xx + (1 - xx) * c;\n  dst[1] = x * y * oneMinusCosine + z * s;\n  dst[2] = x * z * oneMinusCosine - y * s;\n  dst[3] = 0;\n  dst[4] = x * y * oneMinusCosine - z * s;\n  dst[5] = yy + (1 - yy) * c;\n  dst[6] = y * z * oneMinusCosine + x * s;\n  dst[7] = 0;\n  dst[8] = x * z * oneMinusCosine + y * s;\n  dst[9] = y * z * oneMinusCosine - x * s;\n  dst[10] = zz + (1 - zz) * c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Multiply by an axis rotation matrix\n * @param {Matrix4} m matrix to multiply\n * @param {Vector3} axis axis to rotate around\n * @param {number} angleInRadians amount to rotate\n * @param {Matrix4} [dst] optional matrix to store result\n * @return {Matrix4} dst or a new matrix if none provided\n * @memberOf module:webgl-3d-math\n */\nfunction axisRotate(m, axis, angleInRadians, dst) {\n  // This is the optimized version of\n  // return multiply(m, axisRotation(axis, angleInRadians), dst);\n  dst = dst || new MatType(16);\n\n  var x = axis[0];\n  var y = axis[1];\n  var z = axis[2];\n  var n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  var xx = x * x;\n  var yy = y * y;\n  var zz = z * z;\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  var oneMinusCosine = 1 - c;\n\n  var r00 = xx + (1 - xx) * c;\n  var r01 = x * y * oneMinusCosine + z * s;\n  var r02 = x * z * oneMinusCosine - y * s;\n  var r10 = x * y * oneMinusCosine - z * s;\n  var r11 = yy + (1 - yy) * c;\n  var r12 = y * z * oneMinusCosine + x * s;\n  var r20 = x * z * oneMinusCosine + y * s;\n  var r21 = y * z * oneMinusCosine - x * s;\n  var r22 = zz + (1 - zz) * c;\n\n  var m00 = m[0];\n  var m01 = m[1];\n  var m02 = m[2];\n  var m03 = m[3];\n  var m10 = m[4];\n  var m11 = m[5];\n  var m12 = m[6];\n  var m13 = m[7];\n  var m20 = m[8];\n  var m21 = m[9];\n  var m22 = m[10];\n  var m23 = m[11];\n\n  dst[0] = r00 * m00 + r01 * m10 + r02 * m20;\n  dst[1] = r00 * m01 + r01 * m11 + r02 * m21;\n  dst[2] = r00 * m02 + r01 * m12 + r02 * m22;\n  dst[3] = r00 * m03 + r01 * m13 + r02 * m23;\n  dst[4] = r10 * m00 + r11 * m10 + r12 * m20;\n  dst[5] = r10 * m01 + r11 * m11 + r12 * m21;\n  dst[6] = r10 * m02 + r11 * m12 + r12 * m22;\n  dst[7] = r10 * m03 + r11 * m13 + r12 * m23;\n  dst[8] = r20 * m00 + r21 * m10 + r22 * m20;\n  dst[9] = r20 * m01 + r21 * m11 + r22 * m21;\n  dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n  dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Makes a scale matrix\n * @param {number} sx x scale.\n * @param {number} sy y scale.\n * @param {number} sz z scale.\n * @param {Matrix4} [dst] optional matrix to store result\n * @return {Matrix4} dst or a new matrix if none provided\n * @memberOf module:webgl-3d-math\n */\nfunction scaling(sx, sy, sz, dst) {\n  dst = dst || new MatType(16);\n\n  dst[0] = sx;\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = sy;\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = 0;\n  dst[10] = sz;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Multiply by a scaling matrix\n * @param {Matrix4} m matrix to multiply\n * @param {number} sx x scale.\n * @param {number} sy y scale.\n * @param {number} sz z scale.\n * @param {Matrix4} [dst] optional matrix to store result\n * @return {Matrix4} dst or a new matrix if none provided\n * @memberOf module:webgl-3d-math\n */\nfunction scale(m, sx, sy, sz, dst) {\n  // This is the optimized version of\n  // return multiply(m, scaling(sx, sy, sz), dst);\n  dst = dst || new MatType(16);\n\n  dst[0] = sx * m[0 * 4 + 0];\n  dst[1] = sx * m[0 * 4 + 1];\n  dst[2] = sx * m[0 * 4 + 2];\n  dst[3] = sx * m[0 * 4 + 3];\n  dst[4] = sy * m[1 * 4 + 0];\n  dst[5] = sy * m[1 * 4 + 1];\n  dst[6] = sy * m[1 * 4 + 2];\n  dst[7] = sy * m[1 * 4 + 3];\n  dst[8] = sz * m[2 * 4 + 0];\n  dst[9] = sz * m[2 * 4 + 1];\n  dst[10] = sz * m[2 * 4 + 2];\n  dst[11] = sz * m[2 * 4 + 3];\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * creates a matrix from translation, quaternion, scale\n * @param {Number[]} translation [x, y, z] translation\n * @param {Number[]} quaternion [x, y, z, z] quaternion rotation\n * @param {Number[]} scale [x, y, z] scale\n * @param {Matrix4} [dst] optional matrix to store result\n * @return {Matrix4} dst or a new matrix if none provided\n */\nfunction compose(translation, quaternion, scale, dst) {\n  dst = dst || new MatType(16);\n\n  const x = quaternion[0];\n  const y = quaternion[1];\n  const z = quaternion[2];\n  const w = quaternion[3];\n\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n\n  const xx = x * x2;\n  const xy = x * y2;\n  const xz = x * z2;\n\n  const yy = y * y2;\n  const yz = y * z2;\n  const zz = z * z2;\n\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  const sx = scale[0];\n  const sy = scale[1];\n  const sz = scale[2];\n\n  dst[0] = (1 - (yy + zz)) * sx;\n  dst[1] = (xy + wz) * sx;\n  dst[2] = (xz - wy) * sx;\n  dst[3] = 0;\n\n  dst[4] = (xy - wz) * sy;\n  dst[5] = (1 - (xx + zz)) * sy;\n  dst[6] = (yz + wx) * sy;\n  dst[7] = 0;\n\n  dst[8] = (xz + wy) * sz;\n  dst[9] = (yz - wx) * sz;\n  dst[10] = (1 - (xx + yy)) * sz;\n  dst[11] = 0;\n\n  dst[12] = translation[0];\n  dst[13] = translation[1];\n  dst[14] = translation[2];\n  dst[15] = 1;\n\n  return dst;\n}\n\nfunction quatFromRotationMatrix(m, dst) {\n  // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n  // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n  const m11 = m[0];\n  const m12 = m[4];\n  const m13 = m[8];\n  const m21 = m[1];\n  const m22 = m[5];\n  const m23 = m[9];\n  const m31 = m[2];\n  const m32 = m[6];\n  const m33 = m[10];\n\n  const trace = m11 + m22 + m33;\n\n  if (trace > 0) {\n    const s = 0.5 / Math.sqrt(trace + 1);\n    dst[3] = 0.25 / s;\n    dst[0] = (m32 - m23) * s;\n    dst[1] = (m13 - m31) * s;\n    dst[2] = (m21 - m12) * s;\n  } else if (m11 > m22 && m11 > m33) {\n    const s = 2 * Math.sqrt(1 + m11 - m22 - m33);\n    dst[3] = (m32 - m23) / s;\n    dst[0] = 0.25 * s;\n    dst[1] = (m12 + m21) / s;\n    dst[2] = (m13 + m31) / s;\n  } else if (m22 > m33) {\n    const s = 2 * Math.sqrt(1 + m22 - m11 - m33);\n    dst[3] = (m13 - m31) / s;\n    dst[0] = (m12 + m21) / s;\n    dst[1] = 0.25 * s;\n    dst[2] = (m23 + m32) / s;\n  } else {\n    const s = 2 * Math.sqrt(1 + m33 - m11 - m22);\n    dst[3] = (m21 - m12) / s;\n    dst[0] = (m13 + m31) / s;\n    dst[1] = (m23 + m32) / s;\n    dst[2] = 0.25 * s;\n  }\n}\n\nfunction decompose(mat, translation, quaternion, scale) {\n  let sx = m4.length(mat.slice(0, 3));\n  const sy = m4.length(mat.slice(4, 7));\n  const sz = m4.length(mat.slice(8, 11));\n\n  // if determinate is negative, we need to invert one scale\n  const det = determinate(mat);\n  if (det < 0) {\n    sx = -sx;\n  }\n\n  translation[0] = mat[12];\n  translation[1] = mat[13];\n  translation[2] = mat[14];\n\n  // scale the rotation part\n  const matrix = m4.copy(mat);\n\n  const invSX = 1 / sx;\n  const invSY = 1 / sy;\n  const invSZ = 1 / sz;\n\n  matrix[0] *= invSX;\n  matrix[1] *= invSX;\n  matrix[2] *= invSX;\n\n  matrix[4] *= invSY;\n  matrix[5] *= invSY;\n  matrix[6] *= invSY;\n\n  matrix[8] *= invSZ;\n  matrix[9] *= invSZ;\n  matrix[10] *= invSZ;\n\n  quatFromRotationMatrix(matrix, quaternion);\n\n  scale[0] = sx;\n  scale[1] = sy;\n  scale[2] = sz;\n}\n\nfunction determinate(m) {\n  var m00 = m[0 * 4 + 0];\n  var m01 = m[0 * 4 + 1];\n  var m02 = m[0 * 4 + 2];\n  var m03 = m[0 * 4 + 3];\n  var m10 = m[1 * 4 + 0];\n  var m11 = m[1 * 4 + 1];\n  var m12 = m[1 * 4 + 2];\n  var m13 = m[1 * 4 + 3];\n  var m20 = m[2 * 4 + 0];\n  var m21 = m[2 * 4 + 1];\n  var m22 = m[2 * 4 + 2];\n  var m23 = m[2 * 4 + 3];\n  var m30 = m[3 * 4 + 0];\n  var m31 = m[3 * 4 + 1];\n  var m32 = m[3 * 4 + 2];\n  var m33 = m[3 * 4 + 3];\n  var tmp_0 = m22 * m33;\n  var tmp_1 = m32 * m23;\n  var tmp_2 = m12 * m33;\n  var tmp_3 = m32 * m13;\n  var tmp_4 = m12 * m23;\n  var tmp_5 = m22 * m13;\n  var tmp_6 = m02 * m33;\n  var tmp_7 = m32 * m03;\n  var tmp_8 = m02 * m23;\n  var tmp_9 = m22 * m03;\n  var tmp_10 = m02 * m13;\n  var tmp_11 = m12 * m03;\n\n  var t0 =\n    tmp_0 * m11 +\n    tmp_3 * m21 +\n    tmp_4 * m31 -\n    (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n  var t1 =\n    tmp_1 * m01 +\n    tmp_6 * m21 +\n    tmp_9 * m31 -\n    (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n  var t2 =\n    tmp_2 * m01 +\n    tmp_7 * m11 +\n    tmp_10 * m31 -\n    (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n  var t3 =\n    tmp_5 * m01 +\n    tmp_8 * m11 +\n    tmp_11 * m21 -\n    (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n\n  return 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n}\n\n/**\n * Computes the inverse of a matrix.\n * @param {Matrix4} m matrix to compute inverse of\n * @param {Matrix4} [dst] optional matrix to store result\n * @return {Matrix4} dst or a new matrix if none provided\n * @memberOf module:webgl-3d-math\n */\nfunction inverse(m, dst) {\n  dst = dst || new MatType(16);\n  var m00 = m[0 * 4 + 0];\n  var m01 = m[0 * 4 + 1];\n  var m02 = m[0 * 4 + 2];\n  var m03 = m[0 * 4 + 3];\n  var m10 = m[1 * 4 + 0];\n  var m11 = m[1 * 4 + 1];\n  var m12 = m[1 * 4 + 2];\n  var m13 = m[1 * 4 + 3];\n  var m20 = m[2 * 4 + 0];\n  var m21 = m[2 * 4 + 1];\n  var m22 = m[2 * 4 + 2];\n  var m23 = m[2 * 4 + 3];\n  var m30 = m[3 * 4 + 0];\n  var m31 = m[3 * 4 + 1];\n  var m32 = m[3 * 4 + 2];\n  var m33 = m[3 * 4 + 3];\n  var tmp_0 = m22 * m33;\n  var tmp_1 = m32 * m23;\n  var tmp_2 = m12 * m33;\n  var tmp_3 = m32 * m13;\n  var tmp_4 = m12 * m23;\n  var tmp_5 = m22 * m13;\n  var tmp_6 = m02 * m33;\n  var tmp_7 = m32 * m03;\n  var tmp_8 = m02 * m23;\n  var tmp_9 = m22 * m03;\n  var tmp_10 = m02 * m13;\n  var tmp_11 = m12 * m03;\n  var tmp_12 = m20 * m31;\n  var tmp_13 = m30 * m21;\n  var tmp_14 = m10 * m31;\n  var tmp_15 = m30 * m11;\n  var tmp_16 = m10 * m21;\n  var tmp_17 = m20 * m11;\n  var tmp_18 = m00 * m31;\n  var tmp_19 = m30 * m01;\n  var tmp_20 = m00 * m21;\n  var tmp_21 = m20 * m01;\n  var tmp_22 = m00 * m11;\n  var tmp_23 = m10 * m01;\n\n  var t0 =\n    tmp_0 * m11 +\n    tmp_3 * m21 +\n    tmp_4 * m31 -\n    (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n  var t1 =\n    tmp_1 * m01 +\n    tmp_6 * m21 +\n    tmp_9 * m31 -\n    (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n  var t2 =\n    tmp_2 * m01 +\n    tmp_7 * m11 +\n    tmp_10 * m31 -\n    (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n  var t3 =\n    tmp_5 * m01 +\n    tmp_8 * m11 +\n    tmp_11 * m21 -\n    (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n\n  var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n\n  dst[0] = d * t0;\n  dst[1] = d * t1;\n  dst[2] = d * t2;\n  dst[3] = d * t3;\n  dst[4] =\n    d *\n    (tmp_1 * m10 +\n      tmp_2 * m20 +\n      tmp_5 * m30 -\n      (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\n  dst[5] =\n    d *\n    (tmp_0 * m00 +\n      tmp_7 * m20 +\n      tmp_8 * m30 -\n      (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\n  dst[6] =\n    d *\n    (tmp_3 * m00 +\n      tmp_6 * m10 +\n      tmp_11 * m30 -\n      (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\n  dst[7] =\n    d *\n    (tmp_4 * m00 +\n      tmp_9 * m10 +\n      tmp_10 * m20 -\n      (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\n  dst[8] =\n    d *\n    (tmp_12 * m13 +\n      tmp_15 * m23 +\n      tmp_16 * m33 -\n      (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\n  dst[9] =\n    d *\n    (tmp_13 * m03 +\n      tmp_18 * m23 +\n      tmp_21 * m33 -\n      (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\n  dst[10] =\n    d *\n    (tmp_14 * m03 +\n      tmp_19 * m13 +\n      tmp_22 * m33 -\n      (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\n  dst[11] =\n    d *\n    (tmp_17 * m03 +\n      tmp_20 * m13 +\n      tmp_23 * m23 -\n      (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\n  dst[12] =\n    d *\n    (tmp_14 * m22 +\n      tmp_17 * m32 +\n      tmp_13 * m12 -\n      (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\n  dst[13] =\n    d *\n    (tmp_20 * m32 +\n      tmp_12 * m02 +\n      tmp_19 * m22 -\n      (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\n  dst[14] =\n    d *\n    (tmp_18 * m12 +\n      tmp_23 * m32 +\n      tmp_15 * m02 -\n      (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\n  dst[15] =\n    d *\n    (tmp_22 * m22 +\n      tmp_16 * m02 +\n      tmp_21 * m12 -\n      (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\n\n  return dst;\n}\n\n/**\n * Takes a  matrix and a vector with 4 entries, transforms that vector by\n * the matrix, and returns the result as a vector with 4 entries.\n * @param {Matrix4} m The matrix.\n * @param {Vector4} v The point in homogenous coordinates.\n * @param {Vector4} dst optional vector4 to store result\n * @return {Vector4} dst or new Vector4 if not provided\n * @memberOf module:webgl-3d-math\n */\nfunction transformVector(m, v, dst) {\n  dst = dst || new MatType(4);\n  for (var i = 0; i < 4; ++i) {\n    dst[i] = 0.0;\n    for (var j = 0; j < 4; ++j) {\n      dst[i] += v[j] * m[j * 4 + i];\n    }\n  }\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries,\n * interprets the vector as a point, transforms that point by the matrix, and\n * returns the result as a vector with 3 entries.\n * @param {Matrix4} m The matrix.\n * @param {Vector3} v The point.\n * @param {Vector4} dst optional vector4 to store result\n * @return {Vector4} dst or new Vector4 if not provided\n * @memberOf module:webgl-3d-math\n */\nfunction transformPoint(m, v, dst) {\n  dst = dst || new MatType(3);\n  var v0 = v[0];\n  var v1 = v[1];\n  var v2 = v[2];\n  var d =\n    v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];\n\n  dst[0] =\n    (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) /\n    d;\n  dst[1] =\n    (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) /\n    d;\n  dst[2] =\n    (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) /\n    d;\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a\n * direction, transforms that direction by the matrix, and returns the result;\n * assumes the transformation of 3-dimensional space represented by the matrix\n * is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion. Returns a vector with 3\n * entries.\n * @param {Matrix4} m The matrix.\n * @param {Vector3} v The direction.\n * @param {Vector4} dst optional vector4 to store result\n * @return {Vector4} dst or new Vector4 if not provided\n * @memberOf module:webgl-3d-math\n */\nfunction transformDirection(m, v, dst) {\n  dst = dst || new MatType(3);\n\n  var v0 = v[0];\n  var v1 = v[1];\n  var v2 = v[2];\n\n  dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n  dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n  dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector\n * as a normal to a surface, and computes a vector which is normal upon\n * transforming that surface by the matrix. The effect of this function is the\n * same as transforming v (as a direction) by the inverse-transpose of m.  This\n * function assumes the transformation of 3-dimensional space represented by the\n * matrix is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion.  Returns a vector with 3\n * entries.\n * @param {Matrix4} m The matrix.\n * @param {Vector3} v The normal.\n * @param {Vector3} [dst] The direction.\n * @return {Vector3} The transformed direction.\n * @memberOf module:webgl-3d-math\n */\nfunction transformNormal(m, v, dst) {\n  dst = dst || new MatType(3);\n  var mi = inverse(m);\n  var v0 = v[0];\n  var v1 = v[1];\n  var v2 = v[2];\n\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n  return dst;\n}\n\nfunction copy(src, dst) {\n  dst = dst || new MatType(16);\n\n  dst[0] = src[0];\n  dst[1] = src[1];\n  dst[2] = src[2];\n  dst[3] = src[3];\n  dst[4] = src[4];\n  dst[5] = src[5];\n  dst[6] = src[6];\n  dst[7] = src[7];\n  dst[8] = src[8];\n  dst[9] = src[9];\n  dst[10] = src[10];\n  dst[11] = src[11];\n  dst[12] = src[12];\n  dst[13] = src[13];\n  dst[14] = src[14];\n  dst[15] = src[15];\n\n  return dst;\n}\n\nexport const m4 = {\n  copy: copy,\n  lookAt: lookAt,\n  addVectors: addVectors,\n  subtractVectors: subtractVectors,\n  scaleVector: scaleVector,\n  distance: distance,\n  distanceSq: distanceSq,\n  normalize: normalize,\n  compose: compose,\n  cross: cross,\n  decompose: decompose,\n  dot: dot,\n  identity: identity,\n  transpose: transpose,\n  length: length,\n  lengthSq: lengthSq,\n  orthographic: orthographic,\n  frustum: frustum,\n  perspective: perspective,\n  translation: translation,\n  translate: translate,\n  xRotation: xRotation,\n  yRotation: yRotation,\n  zRotation: zRotation,\n  xRotate: xRotate,\n  yRotate: yRotate,\n  zRotate: zRotate,\n  axisRotation: axisRotation,\n  axisRotate: axisRotate,\n  scaling: scaling,\n  scale: scale,\n  multiply: multiply,\n  inverse: inverse,\n  transformVector: transformVector,\n  transformPoint: transformPoint,\n  transformDirection: transformDirection,\n  transformNormal: transformNormal,\n  setDefaultType: setDefaultType,\n};\n","import { createProgramFromScripts, resizeCanvasToDisplaySize } from \"./utils\";\nimport \"./index.css\";\nimport mountain from \"./assets/mountain.jpg\";\nimport street from \"./assets/street.jpg\";\nimport laptop from \"./assets/laptop.jpg\";\nimport { m4 } from \"./m4\";\n\n// https://webglfundamentals.org/webgl/lessons/webgl-2d-matrices.html\n\nconst canvas = document.querySelector(\"#canvas\");\nconst gl = canvas.getContext(\"webgl\");\n\n// setup GLSL program\nconst program = createProgramFromScripts(gl, [\n  \"vertex-shader-2d\",\n  \"fragment-shader-2d\",\n]);\n\n// look up where the vertex data needs to go.\nvar positionLocation = gl.getAttribLocation(program, \"a_position\");\nvar texcoordLocation = gl.getAttribLocation(program, \"a_texcoord\");\n\n// lookup uniforms\nvar matrixLocation = gl.getUniformLocation(program, \"u_matrix\");\nvar textureMatrixLocation = gl.getUniformLocation(program, \"u_textureMatrix\");\nvar textureLocation = gl.getUniformLocation(program, \"u_texture\");\n// Create a buffer to put three 2d clip space points in\n// Create a buffer.\nvar positionBuffer = gl.createBuffer();\ngl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n// Put a unit quad in the buffer\nvar positions = [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1];\ngl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n\n/// Create a buffer for texture coords\nvar texcoordBuffer = gl.createBuffer();\ngl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n\n// Put texcoords in the buffer\nvar texcoords = [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1];\ngl.bufferData(gl.ARRAY_BUFFER, new Float32Array(texcoords), gl.STATIC_DRAW);\n\n// creates a texture info { width: w, height: h, texture: tex }\n// The texture will start with 1x1 pixels and be updated\n// when the image has loaded\nfunction loadImageAndCreateTextureInfo(url) {\n  var tex = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, tex);\n  // Fill the texture with a 1x1 blue pixel.\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    gl.RGBA,\n    1,\n    1,\n    0,\n    gl.RGBA,\n    gl.UNSIGNED_BYTE,\n    new Uint8Array([0, 0, 255, 255])\n  );\n\n  // let's assume all images are not a power of 2\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n  var textureInfo = {\n    width: 1, // we don't know the size until it loads\n    height: 1,\n    texture: tex,\n  };\n  var img = new Image();\n  img.addEventListener(\"load\", function () {\n    textureInfo.width = img.width;\n    textureInfo.height = img.height;\n    console.log(textureInfo.width);\n    gl.bindTexture(gl.TEXTURE_2D, textureInfo.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);\n  });\n  img.src = url;\n\n  return textureInfo;\n}\n\nvar textureInfos = [\n  loadImageAndCreateTextureInfo(mountain),\n  // loadImageAndCreateTextureInfo(street),\n  // loadImageAndCreateTextureInfo(laptop),\n];\n\nvar drawInfos = [];\nvar numToDraw = 1;\n\nfor (var ii = 0; ii < numToDraw; ++ii) {\n  const tl = { x: 0, y: 0 };\n  const bl = { x: 0, y: 1 };\n  const tr = { x: 1, y: 0 };\n  const br = { x: 1, y: 1 };\n  var drawInfo = {\n    speed: 0, //50 + 150 * Math.random(),\n    x: 100, //Math.random() * gl.canvas.width,\n    y: 100, // Math.random() * gl.canvas.height,\n    dx: 0, //Math.random() > 0.5 ? -1 : 1,\n    dy: 0, // Math.random() > 0.5 ? -1 : 1,\n    xScale: 1,\n    yScale: 1,\n    offX: 0,\n    offY: 0,\n    rotation: 0, // Math.random() * Math.PI * 2,\n    deltaRotation: 0, //(0.5 + Math.random() * 0.5) * (Math.random() > 0.5 ? -1 : 1),\n    width: 1,\n    height: 1,\n    textureInfo: textureInfos[(Math.random() * textureInfos.length) | 0],\n    vertices: { tl, bl, tr, br },\n    verticesInitial: { tl, bl, tr, br },\n  };\n  drawInfos.push(drawInfo);\n}\nfunction update(deltaTime) {\n  drawInfos.forEach(function (drawInfo) {\n    Object.keys(drawInfo.vertices).forEach((key, index) => {\n      const v = drawInfo.vertices[key];\n      const original = drawInfo.vertices[key];\n      // v.x = original.x + deltaTime * 0.00001;\n    });\n\n    drawInfo.x += drawInfo.dx * drawInfo.speed * deltaTime;\n    drawInfo.y += drawInfo.dy * drawInfo.speed * deltaTime;\n    if (drawInfo.x < 0) {\n      drawInfo.dx = 1;\n    }\n    if (drawInfo.x + drawInfo.textureInfo.width >= gl.canvas.width) {\n      drawInfo.dx = -1;\n    }\n    if (drawInfo.y < 0) {\n      drawInfo.dy = 1;\n    }\n    if (drawInfo.y + drawInfo.textureInfo.height >= gl.canvas.height) {\n      drawInfo.dy = -1;\n    }\n    drawInfo.rotation += drawInfo.deltaRotation * deltaTime;\n  });\n}\n\nfunction draw() {\n  resizeCanvasToDisplaySize(gl.canvas);\n\n  // Tell WebGL how to convert from clip space to pixels\n  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n  gl.clear(gl.COLOR_BUFFER_BIT);\n\n  drawInfos.forEach(function (drawInfo) {\n    var dstX = drawInfo.x;\n    var dstY = drawInfo.y;\n    var dstWidth = drawInfo.textureInfo.width * drawInfo.xScale;\n    var dstHeight = drawInfo.textureInfo.height * drawInfo.yScale;\n\n    var srcX = 0; //drawInfo.textureInfo.width * drawInfo.offX;\n    var srcY = 0; // drawInfo.textureInfo.height * drawInfo.offY;\n    var srcWidth = drawInfo.textureInfo.width * drawInfo.width;\n    var srcHeight = drawInfo.textureInfo.height * drawInfo.height;\n\n    drawImage(\n      drawInfo.vertices,\n      drawInfo.textureInfo.texture,\n      drawInfo.textureInfo.width,\n      drawInfo.textureInfo.height,\n      srcX,\n      srcY,\n      srcWidth,\n      srcHeight,\n      dstX,\n      dstY,\n      dstWidth,\n      dstHeight,\n      drawInfo.rotation\n    );\n  });\n}\n\nvar then = 0;\nfunction render(time) {\n  var now = time * 0.001;\n  var deltaTime = Math.min(0.1, now - then);\n  then = now;\n\n  update(time);\n  draw();\n\n  requestAnimationFrame(render);\n}\n\n// Unlike images, textures do not have a width and height associated\n// with them so we'll pass in the width and height of the texture\nfunction drawImage(\n  vertices,\n  tex,\n  texWidth,\n  texHeight,\n  srcX,\n  srcY,\n  srcWidth,\n  srcHeight,\n  dstX,\n  dstY,\n  dstWidth,\n  dstHeight,\n  srcRotation\n) {\n  if (dstX === undefined) {\n    dstX = srcX;\n    srcX = 0;\n  }\n  if (dstY === undefined) {\n    dstY = srcY;\n    srcY = 0;\n  }\n  if (srcWidth === undefined) {\n    srcWidth = texWidth;\n  }\n  if (srcHeight === undefined) {\n    srcHeight = texHeight;\n  }\n  if (dstWidth === undefined) {\n    dstWidth = srcWidth;\n    srcWidth = texWidth;\n  }\n  if (dstHeight === undefined) {\n    dstHeight = srcHeight;\n    srcHeight = texHeight;\n  }\n  if (srcRotation === undefined) {\n    srcRotation = 0;\n  }\n  gl.bindTexture(gl.TEXTURE_2D, tex);\n\n  // Tell WebGL to use our shader program pair\n  gl.useProgram(program);\n\n  // Setup the attributes to pull data from our buffers\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n  // the image is currently at a position, other than 0,0.\n  // caclulate it the quads position in clip space to align it to 0,0 screen coords\n  // this new coord will set the image to 0,0 and make it full widtth and height of the screen\n  // const extraWidth = (gl.canvas.width - srcWidth) / srcWidth;\n  // const extraHeight = (gl.canvas.height - srcHeight) / srcHeight;\n  // const offsetX = dstX / srcWidth;\n  // const offsetY = dstY / srcHeight;\n\n  // const tl = { x: 0 - offsetX, y: 0-offsetY };\n  // const bl = { x: 0 - offsetX, y: 1 + extraHeight-offsetY };\n  // const tr = { x: 1 + extraWidth - offsetX, y: 0-offsetY };\n  // const br = { x: 1 + extraWidth - offsetX, y: 1 + extraHeight -offsetY};\n  const { tl, bl, br, tr } = vertices;\n  const vertexPositions = [\n    tl.x,\n    tl.y,\n    bl.x,\n    bl.y,\n    tr.x,\n    tr.y,\n    tr.x,\n    tr.y,\n    bl.x,\n    bl.y,\n    br.x,\n    br.y,\n  ];\n  gl.bufferData(\n    gl.ARRAY_BUFFER,\n    new Float32Array(vertexPositions),\n    gl.STATIC_DRAW\n  );\n\n  gl.enableVertexAttribArray(positionLocation);\n  gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\n  gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n  gl.enableVertexAttribArray(texcoordLocation);\n  gl.vertexAttribPointer(texcoordLocation, 2, gl.FLOAT, false, 0, 0);\n\n  // this matrix will convert from pixels to clip space\n  var matrix = m4.orthographic(0, gl.canvas.width, gl.canvas.height, 0, -1, 1);\n\n  // this matrix will translate our quad to dstX, dstY\n  matrix = m4.translate(matrix, dstX, dstY, 0);\n\n  // this matrix will scale our 1 unit quad\n  // from 1 unit to texWidth, texHeight units\n  matrix = m4.scale(matrix, dstWidth, dstHeight, 1);\n\n  // Set the matrix.\n  gl.uniformMatrix4fv(matrixLocation, false, matrix);\n\n  // just like a 2d projection matrix except in texture space (0 to 1)\n  // instead of clip space. This matrix puts us in pixel space.\n  var texMatrix = m4.scaling(1 / texWidth, 1 / texHeight, 1);\n\n  // We need to pick a place to rotate around\n  // We'll move to the middle, rotate, then move back\n  texMatrix = m4.translate(texMatrix, texWidth * 0.5, texHeight * 0.5, 0);\n  texMatrix = m4.zRotate(texMatrix, srcRotation);\n  texMatrix = m4.translate(texMatrix, texWidth * -0.5, texHeight * -0.5, 0);\n\n  // because were in pixel space\n  // the scale and translation are now in pixels\n  texMatrix = m4.translate(texMatrix, srcX, srcY, 0);\n  texMatrix = m4.scale(texMatrix, srcWidth, srcHeight, 1);\n\n  // Set the texture matrix.\n  gl.uniformMatrix4fv(textureMatrixLocation, false, texMatrix);\n\n  // Tell the shader to get the texture from texture unit 0\n  gl.uniform1i(textureLocation, 0);\n\n  // draw the quad (2 triangles, 6 vertices)\n  gl.drawArrays(gl.TRIANGLES, 0, 6);\n}\n\nrequestAnimationFrame(render);\n"],"sourceRoot":""}